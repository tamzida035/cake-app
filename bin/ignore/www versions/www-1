#!/usr/bin/env node

/**
 * Module dependencies.
 */

// version 1: https copnnection on port 443. Speech to text conversion
var app = require('../app');
var debug = require('debug')('temp-cake:server');
var http = require('http');
//***********
const https = require('https');
const fs = require('fs');
const fss=fs.promises;

const options = {
    key: fs.readFileSync('./server_eg.key'), // replace it with your key path
    cert: fs.readFileSync('./server_eg.crt'), // replace it with your certificate path
}
https.createServer(options, (req, res) => {
  fss.readFile(__dirname + "/speech_recog.html")
        .then(contents => {
            res.setHeader("Content-Type", "text/html");
            res.writeHead(200);
            res.end(contents);
        })
        .catch(err => {
            res.writeHead(500);
            res.end(err);
            return;
        });
  //res.writeHead(200);
  //res.end('Hello, HTTPS World!');
}).listen(443, () => {
  console.log('Server is running on port 443');
});
//************


/**
 * Get port from environment and store in Express.
 */

//var port = normalizePort(process.env.PORT || '3000');
//app.set('port', port);

/**
 * Create HTTP server.
 */

//var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(port);
//server.on('error', onError);
//server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

/*function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}*/

